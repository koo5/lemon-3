/*
 * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)
  * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.
   *
    * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
      * to deal in the Software without restriction, including without limitation
       * the rights to use, copy, modify, merge, publish, distribute, sublicense,
        * and/or sell copies of the Software, and to permit persons to whom the
	 * Software is furnished to do so, subject to the following conditions:
	  *
	   * The above copyright notice including the dates of first publication and
	    * either this permission notice or a reference to
	     * http://oss.sgi.com/projects/FreeB/
	      * shall be included in all copies or substantial portions of the Software.
	       *
	        * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
		   * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
		    * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
		     * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
		      * SOFTWARE.
		       *
		        * Except as contained in this notice, the name of Silicon Graphics, Inc.
			 * shall not be used in advertising or otherwise to promote the sale, use or
			  * other dealings in this Software without prior written authorization from
			   * Silicon Graphics, Inc.
			    */
			    


static void __gluMakeIdentityd(GLdouble m[16])
{
    m[0+4*0] = 1; m[0+4*1] = 0; m[0+4*2] = 0; m[0+4*3] = 0;
    m[1+4*0] = 0; m[1+4*1] = 1; m[1+4*2] = 0; m[1+4*3] = 0;
    m[2+4*0] = 0; m[2+4*1] = 0; m[2+4*2] = 1; m[2+4*3] = 0;
    m[3+4*0] = 0; m[3+4*1] = 0; m[3+4*2] = 0; m[3+4*3] = 1;
}

static int __gluInvertMatrixd(const GLdouble src[16], GLdouble inverse[16])
{
    int i, j, k, swap;
    double t;
    GLdouble temp[4][4];

    for (i=0; i<4; i++) {
for (j=0; j<4; j++) {
    temp[i][j] = src[i*4+j];
}
    }
    __gluMakeIdentityd(inverse);

    for (i = 0; i < 4; i++) {
/*
** Look for largest element in column
*/
swap = i;
for (j = i + 1; j < 4; j++) {
    if (fabs(temp[j][i]) > fabs(temp[i][i])) {
swap = j;
    }
}

if (swap != i) {
    /*
    ** Swap rows.
    */
    for (k = 0; k < 4; k++) {
t = temp[i][k];
temp[i][k] = temp[swap][k];
temp[swap][k] = t;

t = inverse[i*4+k];
inverse[i*4+k] = inverse[swap*4+k];
inverse[swap*4+k] = t;
    }
}

if (temp[i][i] == 0) {
    /*
    ** No non-zero pivot.  The matrix is singular, which shouldn't
    ** happen.  This means the user gave us a bad matrix.
    */
    return GL_FALSE;
}

t = temp[i][i];
for (k = 0; k < 4; k++) {
    temp[i][k] /= t;
    inverse[i*4+k] /= t;
}
for (j = 0; j < 4; j++) {
    if (j != i) {
t = temp[j][i];
for (k = 0; k < 4; k++) {
    temp[j][k] -= temp[i][k]*t;
    inverse[j*4+k] -= inverse[i*4+k]*t;
}
    }
}
    }
    return GL_TRUE;
}

static void __gluMultMatricesd(const GLdouble a[16], const GLdouble b[16],
GLdouble r[16])
{
    int i, j;

    for (i = 0; i < 4; i++) {
for (j = 0; j < 4; j++) {
    r[i*4+j] = 
a[i*4+0]*b[0*4+j] +
a[i*4+1]*b[1*4+j] +
a[i*4+2]*b[2*4+j] +
a[i*4+3]*b[3*4+j];
}
    }
}

static void __gluMultMatrixVecd(const GLdouble matrix[16], const GLdouble in[4],
      GLdouble out[4])
{
    int i;

    for (i=0; i<4; i++) {
out[i] = 
    in[0] * matrix[0*4+i] +
    in[1] * matrix[1*4+i] +
    in[2] * matrix[2*4+i] +
    in[3] * matrix[3*4+i];
    }
}

GLint
gluUnProject(GLdouble winx, GLdouble winy, GLdouble winz,
const GLdouble modelMatrix[16], 
const GLdouble projMatrix[16],
                const GLint viewport[4],
        GLdouble *objx, GLdouble *objy, GLdouble *objz)
{
    double finalMatrix[16];
    double in[4];
    double out[4];

    __gluMultMatricesd(modelMatrix, projMatrix, finalMatrix);
    if (!__gluInvertMatrixd(finalMatrix, finalMatrix)) return(GL_FALSE);

    in[0]=winx;
    in[1]=winy;
    in[2]=winz;
    in[3]=1.0;

    /* Map x and y from window coordinates */
    in[0] = (in[0] - viewport[0]) / viewport[2];
    in[1] = (in[1] - viewport[1]) / viewport[3];

    /* Map to range -1 to 1 */
    in[0] = in[0] * 2 - 1;
    in[1] = in[1] * 2 - 1;
    in[2] = in[2] * 2 - 1;

    __gluMultMatrixVecd(finalMatrix, in, out);
    if (out[3] == 0.0) return(GL_FALSE);
    out[0] /= out[3];
    out[1] /= out[3];
    out[2] /= out[3];
    *objx = out[0];
    *objy = out[1];
    *objz = out[2];
    return(GL_TRUE);
}


GLint GLAPI
gluProject(GLdouble objx, GLdouble objy, GLdouble objz, 
      const GLdouble modelMatrix[16], 
      const GLdouble projMatrix[16],
              const GLint viewport[4],
      GLdouble *winx, GLdouble *winy, GLdouble *winz)
{
    double in[4];
    double out[4];

    in[0]=objx;
    in[1]=objy;
    in[2]=objz;
    in[3]=1.0;
    __gluMultMatrixVecd(modelMatrix, in, out);
    __gluMultMatrixVecd(projMatrix, out, in);
    if (in[3] == 0.0) return(GL_FALSE);
    in[0] /= in[3];
    in[1] /= in[3];
    in[2] /= in[3];
    /* Map x, y and z to range 0-1 */
    in[0] = in[0] * 0.5 + 0.5;
    in[1] = in[1] * 0.5 + 0.5;
    in[2] = in[2] * 0.5 + 0.5;

    /* Map x,y to viewport */
    in[0] = in[0] * viewport[2] + viewport[0];
    in[1] = in[1] * viewport[3] + viewport[1];

    *winx=in[0];
    *winy=in[1];
    *winz=in[2];
    return(GL_TRUE);
}

